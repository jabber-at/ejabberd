Description: Provide custom replacement for xmerl_regexp:sh_to_awk/1
 Erlang R15 dropped support for its old regular expressions library
 (implemented as the "regexp" module) and replaced it with a new,
 PCRE-based, implementation (implemented as the "re" module).
 This transition lost the regexp:sh_to_awk/1 function which, given
 a "glob-style expression" commonly used in POSIX shells to match
 filenames, would produce a regular expression specification with
 the equivalent semantics.  The ejabberd upstream tried to combat
 this situation [1] by using xmerl_regexp:sh_to_awk/1.
 This introduced an implicit dependency on the erlang-xmerl library
 which has been the cause for a Debian bug #670307.
 Depending on erlang-xmerl has two problems:
 1) It's a 1.5M library otherwise not used by ejabberd code while
    the function itself is rather straightforward to implement.
 2) The implementation of xmerl_regexp:sh_to_awk/1 has certain
    flaws (incorrect parsing of bracketed expressions, not escaping
    match repetition counts).
 As a result, a custom implementation of sh_to_awk/1 is provided,
 which works almost like xmerl_regexp:sh_to_awk/1 but fixes its flaws.
 1. https://support.process-one.net/browse/EJAB-921
Author: Konstantin Khomoutov <flatworm@users.sourceforge.net>
Forwarded: no
Last-Update: 2012-06-04
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/ejabberd_regexp.erl
+++ b/src/ejabberd_regexp.erl
@@ -26,6 +26,7 @@
 
 -module(ejabberd_regexp).
 -compile([export_all]).
+-import(lists, [reverse/1, member/2]).
 
 exec(ReM, ReF, ReA, RgM, RgF, RgA) ->
     try apply(ReM, ReF, ReA)
@@ -66,7 +67,56 @@
 	A -> A
     end.
 
-sh_to_awk(ShRegExp) ->
-    case exec(xmerl_regexp, sh_to_awk, [ShRegExp], regexp, sh_to_awk, [ShRegExp]) of
-	A -> A
+sh_to_awk(Pattern) when is_list(Pattern) ->
+    fnmatch_char(Pattern, [$(,$^]).
+
+fnmatch_char([], Acc) ->
+    lists:reverse([$$,$)|Acc]);
+fnmatch_char([Ch|Tail], Acc) ->
+    case Ch of
+	$\\ ->
+	    fnmatch_char(Tail, [$\\,$\\|Acc]);
+	$[ ->
+	    fnmatch_bexp_first(Tail, [Ch|Acc]);
+	$? ->
+	    fnmatch_char(Tail, [$.|Acc]);
+	$* ->
+	    fnmatch_char(Tail, [$*,$.|Acc]);
+	_ ->
+	    case lists:member(Ch, "^.+{}()$|\\") of
+		true ->
+		    fnmatch_char(Tail, [Ch,$\\|Acc]);
+		false ->
+		    fnmatch_char(Tail, [Ch|Acc])
+	    end
+    end.
+
+fnmatch_bexp_first([], _) ->
+    {error, unclosed_be};
+fnmatch_bexp_first([Ch|Tail], Acc) ->
+    case Ch of
+	$] ->
+	    {error, empty_be};
+	$! ->
+	    fnmatch_bexp_next(Tail, false, [$^|Acc]);
+	$\\ ->
+	    fnmatch_bexp_next(Tail, true, Acc);
+	_ ->
+	    fnmatch_bexp_next(Tail, false, [Ch|Acc])
+    end.
+
+fnmatch_bexp_next([], _, _) ->
+    {error, unclosed_be};
+fnmatch_bexp_next([Ch|Tail], true, Acc) ->
+    fnmatch_bexp_next(Tail, false, [Ch,$\\|Acc]);
+fnmatch_bexp_next([Ch|Tail], false, Acc) ->
+    case Ch of
+	$] ->
+	    fnmatch_char(Tail, [Ch|Acc]);
+	$\\ ->
+	    fnmatch_bexp_next(Tail, true, Acc);
+	_ ->
+	    fnmatch_bexp_next(Tail, false, [Ch|Acc])
     end.
+
+%% vim:ts=8:sw=4:sts=4:noet
