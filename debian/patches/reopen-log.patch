This patch fixes several problems pinpointed when dealing
with Debian bug #580951:
 * erlang.log (SASL log file) for some reason only gets reopened
   each second call to `ejabberdcl reopen-log`;
 * After reopening the same files (that is, when the files were
   not renamed (by logrotate, for instance) before reopening),
   erlang.log gets truncated, and ejabberd.log gets renamed
   to "ejabberd-old.log"; both behaviours break the contract
   of the "reopening of log files" contract;

The patch fixes this problems in the following way:
 * The SASL application is started with its built-in file logger
   disabled. After this a custom module is inserted to handle
   SASL messages; this module does not truncate its log file
   when reopening it.
 * Built-in ejabberd's "log rotation" (renaming original log
   files by appending the "-old" suffix to their base names)
   is disabled.
 * Both ejabberd's logging module and the custom SASL logging
   module now respond to a custom event which instructs them
   to reload their respective log files; this event is
   synchronously sent to these modules when `ejabberdctl reopen-log`
   is being run.

Index: ejabberd-2.1.5/src/ejabberd_logger_h.erl
===================================================================
--- ejabberd-2.1.5.orig/src/ejabberd_logger_h.erl	2010-08-02 18:33:20.000000000 +0200
+++ ejabberd-2.1.5/src/ejabberd_logger_h.erl	2010-08-05 19:30:15.670406913 +0200
@@ -58,6 +58,20 @@
 %%          {swap_handler, Args1, State1, Mod2, Args2} |
 %%          remove_handler                              
 %%----------------------------------------------------------------------
+handle_event({ejabberd, reopen}, State) ->
+    Fd   = State#state.fd,
+    File = State#state.file,
+    case file:close(Fd) of
+	ok ->
+	    case file:open(File, [append, raw]) of
+		{ok, NewFd} ->
+		    {ok, #state{fd = NewFd, file = File}};
+		Error ->
+		    Error
+	    end;
+	Error ->
+	    Error
+    end;
 handle_event(Event, State) ->
     write_event(State#state.fd, {erlang:localtime(), Event}),
     {ok, State}.
@@ -82,7 +96,6 @@
     remove_handler;
 handle_info({emulator, _GL, reopen}, State) ->
     file:close(State#state.fd),
-    rotate_log(State#state.file),
     case file:open(State#state.file, [append, raw]) of
 	{ok, Fd} ->
 	    {ok, State#state{fd = Fd}};
Index: ejabberd-2.1.5/src/ejabberd_admin.erl
===================================================================
--- ejabberd-2.1.5.orig/src/ejabberd_admin.erl	2010-08-02 18:33:20.000000000 +0200
+++ ejabberd-2.1.5/src/ejabberd_admin.erl	2010-08-05 19:30:15.670406913 +0200
@@ -219,28 +219,9 @@
 
 reopen_log() ->
     ejabberd_hooks:run(reopen_log_hook, []),
-    %% TODO: Use the Reopen log API for logger_h ?
-    ejabberd_logger_h:reopen_log(),
-    case application:get_env(sasl,sasl_error_logger) of
-	{ok, {file, SASLfile}} ->
-	    error_logger:delete_report_handler(sasl_report_file_h),
-	    ejabberd_logger_h:rotate_log(SASLfile),
-	    error_logger:add_report_handler(sasl_report_file_h,
-	        {SASLfile, get_sasl_error_logger_type()});
-	_ -> false
-	end,
+    gen_event:sync_notify(error_logger, {ejabberd, reopen}),
     ok.
 
-%% Function copied from Erlang/OTP lib/sasl/src/sasl.erl which doesn't export it
-get_sasl_error_logger_type () ->
-    case application:get_env (sasl, errlog_type) of
-	{ok, error} -> error;
-	{ok, progress} -> progress;
-	{ok, all} -> all;
-	{ok, Bad} -> exit ({bad_config, {sasl, {errlog_type, Bad}}});
-	_ -> all
-    end.
-
 %%%
 %%% Stop Kindly
 %%%
Index: ejabberd-2.1.5/src/sasl_report_append_file_h.erl
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ ejabberd-2.1.5/src/sasl_report_append_file_h.erl	2010-08-05 19:30:15.690358206 +0200
@@ -0,0 +1,59 @@
+%%
+%% SASL report logging to a file in append mode.
+%% Inspired by Erlang's sasl_report_file_h module.
+%%
+-module(sasl_report_append_file_h).
+
+%%%
+%%% A handler that can be connected to the error_logger
+%%% event handler.
+%%% Writes all sasl_* events formatted to file
+%%%
+
+-export([init/1,
+	 handle_event/2, handle_call/2, handle_info/2,
+	 terminate/2]).
+
+init({File, Type}) ->
+    process_flag(trap_exit, true),
+    case file:open(File, [append]) of
+	{ok,Fd} ->
+	    {ok, {Fd, File, Type}};
+	What ->
+	    What
+    end.
+
+handle_event({ejabberd, reopen}, {Fd, File, Type}) ->
+    case file:close(Fd) of
+	ok ->
+	    case file:open(File, [append]) of
+		{ok, NewFd} ->
+		    {ok, {NewFd, File, Type}};
+		Error ->
+		    Error
+	    end;
+	Error ->
+	    Error
+    end;
+handle_event({_Type, GL, _Msg}, State) when node(GL) /= node() ->
+    {ok, State};
+handle_event(Event, {Fd, File, Type}) ->
+    sasl_report:write_report(Fd, Type, tag_event(Event)),
+    {ok, {Fd, File, Type}};
+handle_event(_, State) ->
+    {ok, State}.
+
+handle_info({'EXIT', Fd, _Reason}, {Fd, _File, _Type}) ->
+    remove_handler;
+handle_info(_, State) ->
+    {ok, State}.
+
+handle_call(_Query, _State) -> {error, bad_query}.
+
+terminate(_, {Fd, _File, _Type}) ->
+    file:close(Fd),
+    [].
+
+tag_event(Event) ->
+    {calendar:local_time(), Event}.
+
Index: ejabberd-2.1.5/src/ejabberd_app.erl
===================================================================
--- ejabberd-2.1.5.orig/src/ejabberd_app.erl	2010-08-02 18:33:20.000000000 +0200
+++ ejabberd-2.1.5/src/ejabberd_app.erl	2010-08-05 19:30:15.690358206 +0200
@@ -101,6 +101,13 @@
     register(ejabberd, self()),
     %erlang:system_flag(fullsweep_after, 0),
     %error_logger:logfile({open, ?LOG_PATH}),
+    case get_sasl_logger() of
+	{File, Type} ->
+	    error_logger:add_report_handler(sasl_report_append_file_h,
+		{File, Type});
+	_ ->
+	    ok
+    end,
     LogPath = get_log_path(),
     error_logger:add_report_handler(ejabberd_logger_h, LogPath),
     erl_ddll:load_driver(ejabberd:get_so_path(), tls_drv),
@@ -111,6 +118,23 @@
     Port = open_port({spawn, expat_erl}, [binary]),
     loop(Port).
 
+get_sasl_logger() ->
+    case application:get_env(ejabberd, erlang_log_path) of
+	{ok, File} ->
+	    {File, get_sasl_error_logger_type()};
+	_ ->
+	    false
+    end.
+
+%% Function copied from Erlang/OTP lib/sasl/src/sasl.erl which doesn't export it
+get_sasl_error_logger_type () ->
+    case application:get_env (sasl, errlog_type) of
+	{ok, error} -> error;
+	{ok, progress} -> progress;
+	{ok, all} -> all;
+	{ok, Bad} -> exit ({bad_config, {sasl, {errlog_type, Bad}}});
+	_ -> all
+    end.
 
 loop(Port) ->
     receive
