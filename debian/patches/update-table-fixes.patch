Description: Fix updating various tables from 2.1.13 to 14.05
Origin: upstream
 * https://github.com/processone/ejabberd/commit/3e8a0af6d142708d04821f220d56d3889c8762a9
 * https://github.com/processone/ejabberd/commit/6f4b4ad0879c6ba295fd1ac62524b184f55724ae
Bug-Github: https://github.com/processone/ejabberd/issues/234
Applied-Upstream: ?
Last-Update: 2014-06-07
--- a/src/mod_irc.erl
+++ b/src/mod_irc.erl
@@ -56,7 +56,8 @@
 
 -type conn_param() :: {binary(), binary(), inet:port_number(), binary()} |
                       {binary(), binary(), inet:port_number()} |
-                      {binary(), binary()}.
+                      {binary(), binary()} |
+                      {binary()}.
 
 -record(irc_connection,
         {jid_server_host = {#jid{}, <<"">>, <<"">>} :: {jid(), binary(), binary()},
@@ -600,7 +601,7 @@
 					<<"';">>])
 	of
       {selected, [<<"data">>], [[SData]]} ->
-	  data_to_binary(ejabberd_odbc:decode_term(SData));
+	  data_to_binary(From, ejabberd_odbc:decode_term(SData));
       {'EXIT', _} -> error;
       {selected, _, _} -> empty
     end.
@@ -711,7 +712,7 @@
 
 set_data(ServerHost, Host, From, Data) ->
     LServer = jlib:nameprep(ServerHost),
-    set_data(LServer, Host, From, data_to_binary(Data),
+    set_data(LServer, Host, From, data_to_binary(From, Data),
 	     gen_mod:db_type(LServer, ?MODULE)).
 
 set_data(_LServer, Host, From, Data, mnesia) ->
@@ -1217,28 +1218,41 @@
                  end,
     {Username, ConnParams}.
 
-data_to_binary(Data) ->
+data_to_binary(JID, Data) ->
     lists:map(
       fun({username, U}) ->
               {username, iolist_to_binary(U)};
          ({connections_params, Params}) ->
-              {connections_params,
-               lists:map(
-                 fun({S, E}) ->
-                         {iolist_to_binary(S), iolist_to_binary(E)};
-                    ({S, E, Port}) ->
-                         {iolist_to_binary(S), iolist_to_binary(E), Port};
-                    ({S, E, Port, P}) ->
-                         {iolist_to_binary(S), iolist_to_binary(E),
-                          Port, iolist_to_binary(P)}
-                 end, Params)};
+	      {connections_params,
+	       lists:flatmap(
+		 fun(Param) ->
+			 try
+			     [conn_param_to_binary(Param)]
+			 catch _:_ ->
+				 ?ERROR_MSG("failed to convert parameter "
+					    " ~p for user ~s",
+					    [Param, jlib:jid_to_string(JID)]),
+				 []
+			 end
+		 end, Params)};
          (Opt) ->
               Opt
       end, Data).
 
+conn_param_to_binary({S}) ->
+    {iolist_to_binary(S)};
+conn_param_to_binary({S, E}) ->
+    {iolist_to_binary(S), iolist_to_binary(E)};
+conn_param_to_binary({S, E, Port}) when is_integer(Port) ->
+    {iolist_to_binary(S), iolist_to_binary(E), Port};
+conn_param_to_binary({S, E, Port, P}) when is_integer(Port) ->
+    {iolist_to_binary(S), iolist_to_binary(E), Port, iolist_to_binary(P)}.
+
 conn_params_to_list(Params) ->
     lists:map(
-      fun({S, E}) ->
+      fun({S}) ->
+              {binary_to_list(S)};
+         ({S, E}) ->
               {binary_to_list(S), binary_to_list(E)};
          ({S, E, Port}) ->
               {binary_to_list(S), binary_to_list(E), Port};
@@ -1256,10 +1270,11 @@
             fun(#irc_custom{us_host = {_, H}}) -> H end,
             fun(#irc_custom{us_host = {{U, S}, H},
                             data = Data} = R) ->
+		    JID = jlib:make_jid(U, S, <<"">>),
                     R#irc_custom{us_host = {{iolist_to_binary(U),
                                              iolist_to_binary(S)},
                                             iolist_to_binary(H)},
-                                 data = data_to_binary(Data)}
+                                 data = data_to_binary(JID, Data)}
             end);
       _ ->
 	  ?INFO_MSG("Recreating irc_custom table", []),
