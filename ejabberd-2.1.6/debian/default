#
# In this file you can configure options that are passed
# to the erlang runtime system when starting ejabberd
#

# POLL: Kernel polling ([true|false])
#
# The kernel polling option requires support in the kernel.
# Additionaly, you need to enable this feature while compiling Erlang.
#
# Default: false
#
#POLL=false

# SMP: SMP support ([enable|auto|disable])
#
# Explanation in Erlang/OTP documentation:
# enable: starts the Erlang runtime system with SMP support enabled. 
#   This may fail if no runtime system with SMP support is available.
# auto: starts the Erlang runtime system with SMP support enabled if it
#   is available and more than one logical processor are detected.
# disable: starts a runtime system without SMP support.
#
# Default: disable
#
#SMP=disable

# ERL_MAX_PORTS: Maximum number of simultaneously open Erlang ports
#
# ejabberd consumes two or three ports for every connection, either 
# from a client or from another Jabber server. So take this into
# account when setting this limit.
#
# Default: 32000
# Maximum: 268435456
#
#ERL_MAX_PORTS=32000

# FIREWALL_WINDOW: Range of allowed ports to pass through a firewall
#
# If Ejabberd is configured to run in cluster, and a firewall is blocking ports,
# it's possible to make Erlang use a defined range of port (instead of dynamic
# ports) for node communication.
#
# Default: empty
# Example: 4200-4210
#
#FIREWALL_WINDOW=

# PROCESSES: Maximum number of Erlang processes
#
# Erlang consumes a lot of lightweight processes. If there is a lot of activity
# on ejabberd so that the maximum number of proccesses is reached, people will
# experiment greater latency times. As these processes are implemented in
# Erlang, and therefore not related to the operating system processes, you do
# not have to worry about allowing a huge number of them.
#
# Default: 250000
# Maximum: 268435456
#
#PROCESSES=250000

# ERL_MAX_ETS_TABLES: Maximum number of ETS and Mnesia tables
#
# The number of concurrent ETS and Mnesia tables is limited. When the limit is
# reached, errors will appear in the logs:
#   ** Too many db tables **
# You can safely increase this limit when starting ejabberd. It impacts memory
# consumption but the difference will be quite small.
#
# Default: 1400
#
#ERL_MAX_ETS_TABLES=1400

# ERL_OPTIONS: Additional Erlang options
# 
# The next variable allows to specify additional options passed to erlang while
# starting ejabberd. Some useful options are -noshell, -detached, -heart. When
# ejabberd is started from an init.d script options -noshell and -detached are
# added implicitly. See erl(1) for more info.
#
# It might be useful to add "-pa /usr/local/lib/ejabberd/ebin" if you
# want to add local modules in this path.
#
# Default: empty
#
#ERL_OPTIONS=""


# ERL_FULLSWEEP_AFTER: The maximum number of generational collections before
# forcing a fullsweep
# 
# The Erlang runtime system uses a generational garbage collection scheme,
# using an "old heap" for data that has survived at least one garbage
# collection. When there is no more room on the old heap, a fullsweep garbage
# collection will be done.
#
# The fullsweep_after option makes it possible to specify the maximum number
# of generational collections before forcing a fullsweep even if there is
# still room on the old heap. Setting the number to zero effectively disables
# the general collection algorithm, meaning that all live data is copied at
# every garbage collection.
#
# To reduce memory usage, you can set environment variable ERL_FULLSWEEP_AFTER
# to zero. But in this case ejabberd may work slower.
#
# Default: 65535
#
#ERL_FULLSWEEP_AFTER=65535

# ERLANG_NODE: Erlang node for ejabberd server
# 
# The next variable allows to explicitly specify erlang node for ejabberd
# It can be given in different formats:
# ERLANG_NODE=ejabberd
#   Lets erlang add hostname to the node (ejabberd uses short name in this case)
# ERLANG_NODE=ejabberd@hostname
#   Erlang uses node name as is (so make sure that hostname is a real
#   machine hostname or you'll not be able to control ejabberd)
# ERLANG_NODE=ejabberd@hostname.domainname
#   The same as previous, but erlang will use long hostname 
#   (see erl (1) manual for details)
#
# Default: ejabberd
#
#ERLANG_NODE=ejabberd

