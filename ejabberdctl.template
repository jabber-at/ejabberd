#!/bin/sh

# define default configuration
POLL=true
SMP=auto
ERL_MAX_PORTS=32000
ERL_PROCESSES=250000
ERL_MAX_ETS_TABLES=1400
FIREWALL_WINDOW=""
ERLANG_NODE=ejabberd@localhost

# define default environment variables
ERL="{{erl}}"
IEX="{{bindir}}/iex"
EPMD="{{epmd}}"
INSTALLUSER={{installuser}}

# check the proper system user is used if defined
EXEC_CMD="false"
if [ -n "$INSTALLUSER" ] ; then
    if [ $(id -g) -eq $(id -g $INSTALLUSER || echo -1) ] ; then
        EXEC_CMD="as_current_user"
    else
        id -Gn | grep -q wheel && EXEC_CMD="as_install_user"
    fi
else
    EXEC_CMD="as_current_user"
fi
if [ "$EXEC_CMD" = "false" ] ; then
    echo "ERROR: This command can only be run by root or the user $INSTALLUSER" >&2
    exit 7
fi

# parse command line parameters
for arg; do
    case $1 in
        -n|--node) ERLANG_NODE_ARG=$2; shift;;
        -s|--spool) SPOOL_DIR=$2; shift;;
        -l|--logs) LOGS_DIR=$2; shift;;
        -f|--config) EJABBERD_CONFIG_PATH=$2; shift;;
        -c|--ctl-config) EJABBERDCTL_CONFIG_PATH=$2; shift;;
        -d|--config-dir) ETC_DIR=$2; shift;;
        -t|--no-timeout) NO_TIMEOUT="--no-timeout";;
        --) :;;
        *) break;;
    esac
    shift
done

# define ejabberd variables if not already defined from the command line
: ${ETC_DIR:={{sysconfdir}}/ejabberd}
: ${LOGS_DIR:={{localstatedir}}/log/ejabberd}
: ${SPOOL_DIR:={{localstatedir}}/lib/ejabberd}
: ${EJABBERD_CONFIG_PATH:="$ETC_DIR"/ejabberd.yml}
: ${EJABBERDCTL_CONFIG_PATH:="$ETC_DIR"/ejabberdctl.cfg}
[ -f "$EJABBERDCTL_CONFIG_PATH" ] && . "$EJABBERDCTL_CONFIG_PATH"
[ "$ERLANG_NODE_ARG" != "" ] && ERLANG_NODE=$ERLANG_NODE_ARG
[ "$ERLANG_NODE" = "${ERLANG_NODE%.*}" ] && S="-s"
: ${EJABBERD_DOC_PATH:={{docdir}}}
: ${EJABBERD_LOG_PATH:="$LOGS_DIR"/ejabberd.log}

# define erl parameters
ERLANG_OPTS="+K $POLL -smp $SMP +P $ERL_PROCESSES $ERL_OPTIONS"
if [ "$FIREWALL_WINDOW" != "" ] ; then
    ERLANG_OPTS="$ERLANG_OPTS -kernel " \
        "inet_dist_listen_min ${FIREWALL_WINDOW%-*} " \
        "inet_dist_listen_max ${FIREWALL_WINDOW#*-}"
fi
if [ "$INET_DIST_INTERFACE" != "" ] ; then
    INET_DIST_INTERFACE2=$("$ERL" -noshell -eval 'case inet:parse_address("'$INET_DIST_INTERFACE'") of {ok,IP} -> io:format("~p",[IP]); _ -> ok end.' -s erlang halt)
    if [ "$INET_DIST_INTERFACE2" != "" ] ; then
        ERLANG_OPTS="$ERLANG_OPTS -kernel inet_dist_use_interface \"$INET_DIST_INTERFACE2\""
    fi
fi
ERL_LIBS={{libdir}}
ERL_CRASH_DUMP="$LOGS_DIR"/erl_crash_$(date "+%Y%m%d-%H%M%S").dump
ERL_INETRC="$ETC_DIR"/inetrc

# define ejabberd parameters
EJABBERD_OPTS="$EJABBERD_OPTS\
$(sed '/^log_rate_limit/!d;s/:[ \t]*\([0-9]*\).*/ \1/;s/^/ /' "$EJABBERD_CONFIG_PATH")\
$(sed '/^log_rotate_size/!d;s/:[ \t]*\([0-9]*\).*/ \1/;s/^/ /' "$EJABBERD_CONFIG_PATH")\
$(sed '/^log_rotate_count/!d;s/:[ \t]*\([0-9]*\).*/ \1/;s/^/ /' "$EJABBERD_CONFIG_PATH")\
$(sed '/^log_rotate_date/!d;s/:[ \t]*\(.[^ ]*\).*/ \1/;s/^/ /' "$EJABBERD_CONFIG_PATH")"
[ -n "$EJABBERD_OPTS" ] && EJABBERD_OPTS="-ejabberd $EJABBERD_OPTS"
EJABBERD_OPTS="-mnesia dir \"$SPOOL_DIR\" $MNESIA_OPTIONS $EJABBERD_OPTS -s ejabberd"

# export global variables
export EJABBERD_CONFIG_PATH
export EJABBERD_LOG_PATH
export EJABBERD_DOC_PATH
export EJABBERD_PID_PATH
export ERL_CRASH_DUMP
export ERL_EPMD_ADDRESS
export ERL_INETRC
export ERL_MAX_PORTS
export ERL_MAX_ETS_TABLES
export CONTRIB_MODULES_PATH
export CONTRIB_MODULES_CONF_DIR
export ERL_LIBS

# run command either directly or via su $INSTALLUSER
exec_cmd()
{
    case $EXEC_CMD in
        as_install_user) su -c '"$0" $@"' "$INSTALLUSER" -- "$@" ;;
        as_current_user) "$@" ;;
    esac
}
exec_erl()
{
    NODE=$1; shift
    exec_cmd "$ERL" ${S:--}name $NODE $ERLANG_OPTS "$@"
}
exec_iex()
{
    NODE=$1; shift
    exec_cmd "$IEX" ${S:---}name $NODE --erl "$ERLANG_OPTS" "$@"
}

# usage
debugwarning()
{
    if [ "$EJABBERD_BYPASS_WARNINGS" != "true" ] ; then
        echo "--------------------------------------------------------------------"
        echo ""
        echo "IMPORTANT: we will attempt to attach an INTERACTIVE shell"
        echo "to an already running ejabberd node."
        echo "If an ERROR is printed, it means the connection was not successful."
        echo "You can interact with the ejabberd node if you know how to use it."
        echo "Please be extremely cautious with your actions,"
        echo "and exit immediately if you are not completely sure."
        echo ""
        echo "To detach this shell from ejabberd, press:"
        echo "  control+c, control+c"
        echo ""
        echo "--------------------------------------------------------------------"
        echo "To bypass permanently this warning, add to ejabberdctl.cfg the line:"
        echo "  EJABBERD_BYPASS_WARNINGS=true"
        echo "Press return to continue"
        read foo
        echo ""
    fi
}

livewarning()
{
    if [ "$EJABBERD_BYPASS_WARNINGS" != "true" ] ; then
        echo "--------------------------------------------------------------------"
        echo ""
        echo "IMPORTANT: ejabberd is going to start in LIVE (interactive) mode."
        echo "All log messages will be shown in the command shell."
        echo "You can interact with the ejabberd node if you know how to use it."
        echo "Please be extremely cautious with your actions,"
        echo "and exit immediately if you are not completely sure."
        echo ""
        echo "To exit this LIVE mode and stop ejabberd, press:"
        echo "  q().  and press the Enter key"
        echo ""
        echo "--------------------------------------------------------------------"
        echo "To bypass permanently this warning, add to ejabberdctl.cfg the line:"
        echo "  EJABBERD_BYPASS_WARNINGS=true"
        echo "Press return to continue"
        read foo
        echo ""
    fi
}

help()
{
    echo ""
    echo "Commands to start an ejabberd node:"
    echo "  start      Start an ejabberd node in server mode"
    echo "  debug      Attach an interactive Erlang shell to a running ejabberd node"
    echo "  iexdebug   Attach an interactive Elixir shell to a running ejabberd node"
    echo "  live       Start an ejabberd node in live (interactive) mode"
    echo "  iexlive    Start an ejabberd node in live (interactive) mode, within an Elixir shell"
    echo "  foreground Start an ejabberd node in server mode (attached)"
    echo ""
    echo "Optional parameters when starting an ejabberd node:"
    echo "  --config-dir dir   Config ejabberd:    $ETC_DIR"
    echo "  --config file      Config ejabberd:    $EJABBERD_CONFIG_PATH"
    echo "  --ctl-config file  Config ejabberdctl: $EJABBERDCTL_CONFIG_PATH"
    echo "  --logs dir         Directory for logs: $LOGS_DIR"
    echo "  --spool dir        Database spool dir: $SPOOL_DIR"
    echo "  --node nodename    ejabberd node name: $ERLANG_NODE"
    echo ""
}

# dynamic node name helper
uid()
{
    uuid=$(uuidgen 2>/dev/null)
    [ -z "$uuid" -a -f /proc/sys/kernel/random/uuid ] && uuid=$(cat /proc/sys/kernel/random/uuid)
    [ -z "$uuid" ] && uuid=$(printf "%X" $RANDOM$(date +%M%S)$$)
    uuid=${uuid%%-*}
    [ $# -eq 0 ] && echo ${uuid}-${ERLANG_NODE}
    [ $# -eq 1 ] && echo ${uuid}-${1}-${ERLANG_NODE}
    [ $# -eq 2 ] && echo ${uuid}-${1}@${2}
}

# stop epmd if there is no other running node
stop_epmd()
{
    "$EPMD" -names 2>/dev/null | grep -q name || "$EPMD" -kill >/dev/null
}

# make sure node not already running and node name unregistered
# if all ok, ensure runtime directory exists and make it current directory
check_start()
{
    "$EPMD" -names 2>/dev/null | grep -q " ${ERLANG_NODE%@*} " && {
        ps ux | grep -v grep | grep -q " $ERLANG_NODE " && {
            echo "ERROR: The ejabberd node '$ERLANG_NODE' is already running."
            exit 4
        } || {
            ps ux | grep -v grep | grep -q beam && {
                echo "ERROR: The ejabberd node '$ERLANG_NODE' is registered,"
                echo "       but no related beam process has been found."
                echo "Shutdown all other erlang nodes, and call 'epmd -kill'."
                exit 5
            } || {
                "$EPMD" -kill >/dev/null
            }
        }
    } || {
        [ -d "$SPOOL_DIR" ] || exec_cmd mkdir -p "$SPOOL_DIR"
        cd "$SPOOL_DIR" || {
            echo "ERROR: ejabberd can not access directory $SPOOL_DIR"
            exit 6
        }
    }
}

# allow sync calls
wait_status()
{
    # args: status try delay
    # return: 0 OK, 1 KO
    timeout=$2
    status=4
    while [ $status -ne $1 ] ; do
        sleep $3
        timeout=`expr $timeout - 1`
        if [ $timeout -eq 0 ] ; then
            status=$1
        else
            exec_erl $(uid ctl) -hidden -noinput -s ejabberd_ctl \
                     -extra $ERLANG_NODE $NO_TIMEOUT status > /dev/null
            status=$?
        fi
    done
    [ $timeout -gt 0 ]
}

# main
case $1 in
    start)
        check_start
        exec_erl $ERLANG_NODE $EJABBERD_OPTS -noinput -detached
        ;;
    foreground)
        check_start
        exec_erl $ERLANG_NODE $EJABBERD_OPTS -noinput
        ;;
    live)
        livewarning
        check_start
        exec_erl $ERLANG_NODE $EJABBERD_OPTS
        ;;
    debug)
        debugwarning
        exec_erl $(uid debug) -hidden -remsh $ERLANG_NODE
        ;;
    etop)
        exec_erl $(uid top) -hidden -node $ERLANG_NODE -s etop \
                 -s erlang halt -output text
        ;;
    iexdebug)
        debugwarning
        exec_iex $(uid debug) --remsh "$ERLANG_NODE"
        ;;
    iexlive)
        livewarning
        exec_iex $ERLANG_NODE --erl "$EJABBERD_OPTS" --app ejabberd
        ;;
    ping)
        PEER=${2:-$ERLANG_NODE}
        [ "$PEER" = "${PEER%.*}" ] && PS="-s"
        exec_cmd "$ERL" ${PS:--}name $(uid ping $(hostname $PS)) $ERLANG_OPTS \
                 -noinput -hidden -eval 'io:format("~p~n",[net_adm:ping('"$PEER"')])' \
                 -s erlang halt -output text
        ;;
    started)
        wait_status 0 30 2 # wait 30x2s before timeout
        ;;
    stopped)
        wait_status 3 30 2 && stop_epmd # wait 30x2s before timeout
        ;;
    *)
        exec_erl $(uid ctl) -hidden -noinput -s ejabberd_ctl \
                 -extra $ERLANG_NODE $NO_TIMEOUT "$@"
        result=$?
        case $result in
            2|3) help;;
            *) :;;
        esac
        exit $result
        ;;
esac
