%%%-------------------------------------------------------------------
%%% @author Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%% @copyright (C) 2013, Evgeniy Khramtsov
%%% @doc
%%%
%%% @end
%%% Created :  1 May 2013 by Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%%-------------------------------------------------------------------
Cfg = case file:consult("vars.config") of
          {ok, Terms} ->
              Terms;
          _Err ->
              []
      end,

Macros = lists:flatmap(
           fun({roster_gateway_workaround, true}) ->
                   [{d, 'ROSTER_GATEWAY_WORKAROUND'}];
              ({transient_supervisors, false}) ->
                   [{d, 'NO_TRANSIENT_SUPERVISORS'}];
              ({nif, true}) ->
                   [{d, 'NIF'}];
              ({db_type, mssql}) ->
                   [{d, 'mssql'}];
              ({lager, true}) ->
                   [{d, 'LAGER'}];
              (_) ->
                   []
           end, Cfg),

DebugInfo = case lists:keysearch(debug, 1, Cfg) of
                {value, {debug, true}} ->
                    [];
                _ ->
                    [no_debug_info]
            end,

HiPE = case lists:keysearch(hipe, 1, Cfg) of
           {value, {hipe, true}} ->
               [native];
           _ ->
               []
       end,

SrcDirs = lists:foldl(
            fun({tools, true}, Acc) ->
                    [tools|Acc];
               (_, Acc) ->
                    Acc
            end, [], Cfg),

Deps = [{p1_cache_tab, ".*", {git, "git://github.com/processone/cache_tab", "7b89d6afb66d8ff9d56671864be74654f5b18e2f"}},
        {p1_tls, ".*", {git, "git://github.com/processone/tls", "d1366ce51e1cc05738594e1d6c6045fdbda4f3a3"}},
        {p1_stringprep, ".*", {git, "git://github.com/processone/stringprep", "9e9e0f8dbe6a70ef36e1d4436b458ca5a77fbcfb"}},
        {p1_xml, ".*", {git, "git://github.com/processone/xml", "b5309833cb9ddb4c0ac63e1ce8e07142470452cb"}},
	{esip, ".*", {git, "git://github.com/processone/p1_sip", "bba44591c02221b93cbc4e0958efffe0b05405a3"}},
	{p1_stun, ".*", {git, "git://github.com/processone/stun", "a7c07b69c89c67a45c69c7dfcd17ca986afd9e9b"}},
        {p1_yaml, ".*", {git, "git://github.com/processone/p1_yaml", "236b9435ad3731dbab637a16616167e09c074183"}},
        {ehyperloglog, ".*", {git, "https://github.com/vaxelfel/eHyperLogLog.git", "efd14f262c663cde76d8ed48007826dabe9aca41"}},
        {p1_utils, ".*", {git, "git://github.com/processone/p1_utils", "9e646e4ff343e8e902410fa1fe28803202b7e340"}}],

ConfigureCmd = fun(Pkg, Flags) ->
                       {'get-deps',
                        "sh -c 'cd deps/" ++ Pkg ++
                            " && ./configure" ++ Flags ++ "'"}
               end,

XMLFlags = lists:foldl(
             fun({nif, true}, Acc) ->
                     Acc ++ " --enable-nif";
                ({full_xml, true}, Acc) ->
                     Acc ++ " --enable-full-xml";
                (_, Acc) ->
                     Acc
             end, "", Cfg),

PostHooks = [ConfigureCmd("p1_tls", ""),
             ConfigureCmd("p1_stringprep", ""),
             ConfigureCmd("p1_yaml", ""),
	     ConfigureCmd("esip", ""),
             ConfigureCmd("p1_xml", XMLFlags)],

CfgDeps = lists:flatmap(
            fun({mysql, true}) ->
                    [{p1_mysql, ".*", {git, "git://github.com/processone/mysql", "a335d5ba307f269c74a783846275ff4e0ead9a4b"}}];
               ({pgsql, true}) ->
                    [{p1_pgsql, ".*", {git, "git://github.com/processone/pgsql", "58a09c5cb94a59ffb7a79049e16d2ed9701f3195"}}];
               ({pam, true}) ->
                    [{p1_pam, ".*", {git, "git://github.com/processone/epam", "99c6705469fcb5de5186d33a15e8c15134a91727"}}];
               ({zlib, true}) ->
                    [{p1_zlib, ".*", {git, "git://github.com/processone/zlib", "52e82bbc12258ca17ea7ed9b5d10eca60c3db006"}}];
               ({riak, true}) ->
                    [{riakc, ".*",
		      {git, "git://github.com/basho/riak-erlang-client",
		       {tag, "1.4.2"}}}];
               ({json, true}) ->
                    [{jiffy, ".*", {git, "git://github.com/davisp/jiffy", "137d3d94b6ee10001d761d412cbbe7f665680c98"}}];
               ({iconv, true}) ->
                    [{p1_iconv, ".*", {git, "git://github.com/processone/eiconv", "dff5ee59ebef0fd373a11804e4f833ab1b861126"}}];
               ({lager, true}) ->
                    [{lager, ".*", {git, "git://github.com/basho/lager", "e88c9160aee47d3fdfc6560fc281138c5df2ec62"}}];
               ({lager, false}) ->
                    [{p1_logger, ".*", {git, "git://github.com/processone/p1_logger", "c7141aff68282dec46d60a3f39cbf658d0c91961"}}];
               (_) ->
                    []
            end, Cfg),

CfgPostHooks = lists:flatmap(
                 fun({pam, true}) ->
                         [ConfigureCmd("p1_pam", "")];
                    ({zlib, true}) ->
                         [ConfigureCmd("p1_zlib", "")];
                    ({iconv, true}) ->
                         [ConfigureCmd("p1_iconv", "")];
                    (_) ->
                         []
                 end, Cfg),

CfgXrefs = lists:flatmap(
	     fun({mysql, false}) ->
		     ["(\".*mysql.*\":_/_)"];
		({pgsql, false}) ->
		     ["(\".*pgsql.*\":_/_)"];
		({pam, false}) ->
		     ["(\"epam\":_/_)"];
		({riak, false}) ->
		     ["(\"riak.*\":_/_)"];
		({riak, true}) ->
		     % used in map-reduce function called from riak vm
		     ["(\"riak_object\":_/_)"];
		({json, false}) ->
		    ["(\"jiffy\":_/_)"];
		({zlib, false}) ->
		     ["(\"ezlib\":_/_)"];
		({http, false}) ->
		     ["(\"lhttpc\":_/_)"];
		({iconv, false}) ->
		     ["(\"iconv\":_/_)"];
		({odbc, false}) ->
		     ["(\"odbc\":_/_)"];
		(_) ->
		     []
            end, Cfg),


{ok, Cwd} = file:get_cwd(),

Config = [{erl_opts, Macros ++ HiPE ++ DebugInfo ++
               [{src_dirs, [asn1, src | SrcDirs]}]},
          {sub_dirs, ["rel"]},
          {keep_build_info, true},
          {ct_extra_params, "-include "
           ++ filename:join([Cwd, "tools"])},
	  {xref_warnings, false},
          {xref_checks, []},
	  {xref_queries,
	   [{"(XC - UC) || (XU - X - B - "
	     ++ string:join(CfgXrefs, " - ") ++ ")", []}]},
          {post_hooks, PostHooks ++ CfgPostHooks},
          {deps, Deps ++ CfgDeps}],
%%io:format("ejabberd configuration:~n  ~p~n", [Config]),
Config.

%% Local Variables:
%% mode: erlang
%% End:
%% vim: set filetype=erlang tabstop=8:
